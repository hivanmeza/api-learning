openapi: 3.0.3
info:
  title: ToDo API
  version: 1.0.0
  description: API para gestionar proyectos, tareas y etiquetas (versión inicial v1)
servers:
  - url: https://api.example.com
    description: Producción (placeholder)
  - url: http://localhost:5000
    description: Local dev
security:
  - bearerAuth: []
paths:
  /v1/projects:
    post:
      summary: Crear proyecto
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400': { $ref: '#/components/responses/BadRequest' }
  '401': { $ref: '#/components/responses/Unauthorized' }
    get:
      summary: Listar proyectos
      operationId: listProjects
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Project' }
                  page: { type: integer }
                  pageSize: { type: integer }
                  total: { type: integer }
  '401': { $ref: '#/components/responses/Unauthorized' }
  /v1/projects/{projectId}/tasks:
    post:
      summary: Crear task
      operationId: createTask
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
  '401': { $ref: '#/components/responses/Unauthorized' }
    get:
      summary: Listar tasks del proyecto
      operationId: listProjectTasks
      parameters:
        - in: path
          name: projectId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: status
          schema: { type: string }
          description: Lista de estados separados por coma
        - in: query
          name: priority
          schema: { type: string }
        - in: query
          name: dueBefore
          schema: { type: string, format: date }
        - in: query
          name: dueAfter
          schema: { type: string, format: date }
        - in: query
          name: tag
          schema: { type: array, items: { type: string, format: uuid } }
          style: form
          explode: true
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 20 }
        - in: query
          name: sort
          schema: { type: string }
          description: Campos separados por coma. Prefijo - para descendente.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Task' }
                  page: { type: integer }
                  pageSize: { type: integer }
                  total: { type: integer }
        '404': { $ref: '#/components/responses/NotFound' }
  '401': { $ref: '#/components/responses/Unauthorized' }
  /v1/tasks/{taskId}:
    get:
      summary: Obtener task
      operationId: getTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404': { $ref: '#/components/responses/NotFound' }
  '401': { $ref: '#/components/responses/Unauthorized' }
    patch:
      summary: Actualizar parcialmente task
      operationId: updateTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Task' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
  '401': { $ref: '#/components/responses/Unauthorized' }
  /v1/tasks/{taskId}/complete:
    post:
      summary: Marcar task como completada
      operationId: completeTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Task' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
  '401': { $ref: '#/components/responses/Unauthorized' }
  /v1/tasks/{taskId}/audit:
    get:
      summary: Historial de cambios de la task
      operationId: getTaskAudit
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/AuditLog' }
        '404': { $ref: '#/components/responses/NotFound' }
  /v1/tags:
    post:
      summary: Crear tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201': { description: Creado, content: { application/json: { schema: { $ref: '#/components/schemas/Tag' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
    get:
      summary: Listar tags del usuario
      operationId: listTags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Tag' }
  '401': { $ref: '#/components/responses/Unauthorized' }
components:
  responses:
    BadRequest:
      description: Petición inválida
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: No autenticado o token inválido
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  description: "JWT Bearer. Usar header 'Authorization: Bearer <token>'"
  schemas:
    Project:
      type: object
      required: [id, name, createdAt]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 80 }
        description: { type: string, maxLength: 500, nullable: true }
        ownerId: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
    ProjectCreate:
      type: object
      required: [name]
      properties:
        name: { type: string, maxLength: 80 }
        description: { type: string, maxLength: 500 }
    Task:
      type: object
      required: [id, projectId, title, status, priority, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid }
        projectId: { type: string, format: uuid }
        title: { type: string, maxLength: 120 }
        description: { type: string, nullable: true }
        status: { type: string, enum: [OPEN, IN_PROGRESS, BLOCKED, DONE] }
        priority: { type: string, enum: [LOW, MEDIUM, HIGH, URGENT] }
        dueDate: { type: string, format: date-time, nullable: true }
        tagIds:
          type: array
          items: { type: string, format: uuid }
        assigneeId: { type: string, format: uuid, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time, nullable: true }
    TaskCreate:
      type: object
      required: [title, priority]
      properties:
        title: { type: string, maxLength: 120 }
        description: { type: string }
        priority: { type: string, enum: [LOW, MEDIUM, HIGH, URGENT], default: MEDIUM }
        dueDate: { type: string, format: date-time }
        tagIds:
          type: array
          items: { type: string, format: uuid }
        assigneeId: { type: string, format: uuid }
    TaskUpdate:
      type: object
      properties:
        title: { type: string, maxLength: 120 }
        description: { type: string }
        status: { type: string, enum: [OPEN, IN_PROGRESS, BLOCKED, DONE] }
        priority: { type: string, enum: [LOW, MEDIUM, HIGH, URGENT] }
        dueDate: { type: string, format: date-time, nullable: true }
        tagIds:
          type: array
          items: { type: string, format: uuid }
        assigneeId: { type: string, format: uuid, nullable: true }
    Tag:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 40 }
        color: { type: string, pattern: '^#?[0-9A-Fa-f]{6}$', nullable: true }
    TagCreate:
      type: object
      required: [name]
      properties:
        name: { type: string, maxLength: 40 }
        color: { type: string, pattern: '^#?[0-9A-Fa-f]{6}$' }
    AuditLog:
      type: object
      required: [id, entityType, entityId, action, at]
      properties:
        id: { type: string, format: uuid }
        entityType: { type: string }
        entityId: { type: string, format: uuid }
        action: { type: string }
        actorUserId: { type: string, format: uuid }
        at: { type: string, format: date-time }
        diffJson: { type: object }
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
            traceId: { type: string }
